{"ast":null,"code":"var _jsxFileName = \"/Users/catherinedi/shit/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  currentMove\n}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i] && currentMove < 6) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (currentMove >= 6) {\n      // Apply the new movement rule starting from the sixth move\n      if (moveIsValid(i, squares, xIsNext)) {\n        nextSquares[i] = xIsNext ? 'X' : 'O';\n        // Vacate the original square if not aiming for a win\n        if (!calculateWinner(nextSquares)) {\n          const originalIndex = nextSquares.indexOf(xIsNext ? 'X' : 'O');\n          nextSquares[originalIndex] = null;\n        }\n      } else {\n        return; // Ignore invalid moves\n      }\n    } else {\n      // Normal move placement\n      nextSquares[i] = xIsNext ? 'X' : 'O';\n    }\n    onPlay(nextSquares);\n  }\n  function moveIsValid(index, squares, xIsNext) {\n    const player = xIsNext ? 'X' : 'O';\n    const validMoves = getValidMoves(index, squares);\n    return squares[index] === null && validMoves.includes(player);\n  }\n  function getValidMoves(index, squares) {\n    const row = Math.floor(index / 3);\n    const col = index % 3;\n    const directions = [-4, -3, -2, -1, 1, 2, 3, 4];\n    return directions.map(dir => {\n      const newRow = row + Math.floor(dir / 3);\n      const newCol = col + dir % 3;\n      if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3) {\n        return squares[newRow * 3 + newCol];\n      }\n      return null;\n    }).filter(move => move !== null);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: squares.map((square, i) => /*#__PURE__*/_jsxDEV(Square, {\n        value: square,\n        onSquareClick: () => handleClick(i)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n  function handlePlay(nextSquares) {\n    const nextHistory = history.slice(0, currentMove + 1).concat([nextSquares]);\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n  const moves = history.map((squares, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  });\n  function jumpTo(move) {\n    setCurrentMove(move);\n    setXIsNext(move % 2 === 0);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        currentMove: currentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"okRVHJRbGlWwbwRvnd853Um8Ejo=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","currentMove","handleClick","i","calculateWinner","nextSquares","slice","moveIsValid","originalIndex","indexOf","index","player","validMoves","getValidMoves","includes","row","Math","floor","col","directions","map","dir","newRow","newCol","filter","move","winner","status","square","_c2","Game","_s","setXIsNext","history","setHistory","Array","fill","setCurrentMove","currentSquares","handlePlay","nextHistory","concat","length","moves","desc","jumpTo","_c3","lines","a","b","c","$RefreshReg$"],"sources":["/Users/catherinedi/shit/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay, currentMove }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i] && currentMove < 6) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    \n    if (currentMove >= 6) {\n      // Apply the new movement rule starting from the sixth move\n      if (moveIsValid(i, squares, xIsNext)) {\n        nextSquares[i] = xIsNext ? 'X' : 'O';\n        // Vacate the original square if not aiming for a win\n        if (!calculateWinner(nextSquares)) {\n          const originalIndex = nextSquares.indexOf(xIsNext ? 'X' : 'O');\n          nextSquares[originalIndex] = null;\n        }\n      } else {\n        return; // Ignore invalid moves\n      }\n    } else {\n      // Normal move placement\n      nextSquares[i] = xIsNext ? 'X' : 'O';\n    }\n    \n    onPlay(nextSquares);\n  }\n\n  function moveIsValid(index, squares, xIsNext) {\n    const player = xIsNext ? 'X' : 'O';\n    const validMoves = getValidMoves(index, squares);\n    return squares[index] === null && validMoves.includes(player);\n  }\n\n  function getValidMoves(index, squares) {\n    const row = Math.floor(index / 3);\n    const col = index % 3;\n    const directions = [-4, -3, -2, -1, 1, 2, 3, 4];\n    return directions\n      .map(dir => {\n        const newRow = row + Math.floor(dir / 3);\n        const newCol = col + dir % 3;\n        if (newRow >= 0 && newRow < 3 && newCol >= 0 && newCol < 3) {\n          return squares[newRow * 3 + newCol];\n        }\n        return null;\n      })\n      .filter(move => move !== null);\n  }\n\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        {squares.map((square, i) => (\n          <Square key={i} value={square} onSquareClick={() => handleClick(i)} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = history.slice(0, currentMove + 1).concat([nextSquares]);\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n\n  const moves = history.map((squares, move) => {\n    const desc = move ? 'Go to move #' + move : 'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{desc}</button>\n      </li>\n    );\n  });\n\n  function jumpTo(move) {\n    setCurrentMove(move);\n    setXIsNext(move % 2 === 0);\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} currentMove={currentMove} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}