{"ast":null,"code":"var _jsxFileName = \"/Users/catherinedi/shit/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction isAdjacent(srcIndex, destIndex) {\n  const srcRow = Math.floor(srcIndex / 3);\n  const srcCol = srcIndex % 3;\n  const destRow = Math.floor(destIndex / 3);\n  const destCol = destIndex % 3;\n  return Math.abs(srcRow - destRow) <= 1 && Math.abs(srcCol - destCol) <= 1;\n}\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  currentMove,\n  selectedSquare,\n  setSelectedSquare\n}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i] && currentMove < 5) {\n      return; // No action if there's a winner or if the square is already filled in the first 5 moves\n    }\n    const nextSquares = squares.slice();\n    const player = xIsNext ? 'X' : 'O';\n\n    // After the fifth move, allow players to move an existing piece\n    if (currentMove >= 5) {\n      if (selectedSquare !== null && squares[i] === null && isAdjacent(selectedSquare, i)) {\n        nextSquares[selectedSquare] = null; // Remove from current position\n        nextSquares[i] = player; // Move to new position\n        onPlay(nextSquares, null); // Pass null to deselect\n      } else if (squares[i] === player) {\n        setSelectedSquare(i); // Select the piece\n      }\n    } else {\n      // Normal placement for the first 5 moves\n      nextSquares[i] = player;\n      onPlay(nextSquares, null); // Pass null as no piece is selected\n    }\n  }\n  const winner = calculateWinner(squares);\n  const status = winner ? 'Winner: ' + winner : 'Next player: ' + (xIsNext ? 'X' : 'O');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: squares.map((square, idx) => /*#__PURE__*/_jsxDEV(Square, {\n        value: square,\n        onSquareClick: () => handleClick(idx)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c2 = Board;\nfunction Game() {\n  _s();\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null),\n    selectedSquare: null\n  }]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const current = history[currentMove];\n  const currentSquares = current.squares;\n  const selectedSquare = current.selectedSquare;\n  function handlePlay(nextSquares, selectedSquareIndex) {\n    const newHistory = history.slice(0, currentMove + 1);\n    newHistory.push({\n      squares: nextSquares,\n      selectedSquare: selectedSquareIndex\n    });\n    setHistory(newHistory);\n    setCurrentMove(newHistory.length - 1);\n  }\n  function jumpTo(step) {\n    setCurrentMove(step);\n  }\n  const moves = history.map((_, move) => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => jumpTo(move),\n      children: move ? `Go to move #${move}` : 'Go to game start'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, move, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        currentMove: currentMove,\n        selectedSquare: selectedSquare,\n        setSelectedSquare: index => {\n          const newHistory = history.slice();\n          newHistory[currentMove] = {\n            ...newHistory[currentMove],\n            selectedSquare: index\n          };\n          setHistory(newHistory);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"dVGDlyLbBCkQw7pP/Ydb9e/8sHc=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nexport default Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","isAdjacent","srcIndex","destIndex","srcRow","Math","floor","srcCol","destRow","destCol","abs","Board","xIsNext","squares","onPlay","currentMove","selectedSquare","setSelectedSquare","handleClick","i","calculateWinner","nextSquares","slice","player","winner","status","map","square","idx","_c2","Game","_s","history","setHistory","Array","fill","setCurrentMove","current","currentSquares","handlePlay","selectedSquareIndex","newHistory","push","length","jumpTo","step","moves","_","move","index","_c3","lines","a","b","c","$RefreshReg$"],"sources":["/Users/catherinedi/shit/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction isAdjacent(srcIndex, destIndex) {\n  const srcRow = Math.floor(srcIndex / 3);\n  const srcCol = srcIndex % 3;\n  const destRow = Math.floor(destIndex / 3);\n  const destCol = destIndex % 3;\n  return Math.abs(srcRow - destRow) <= 1 && Math.abs(srcCol - destCol) <= 1;\n}\n\nfunction Board({ xIsNext, squares, onPlay, currentMove, selectedSquare, setSelectedSquare }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || (squares[i] && currentMove < 5)) {\n      return; // No action if there's a winner or if the square is already filled in the first 5 moves\n    }\n    const nextSquares = squares.slice();\n    const player = xIsNext ? 'X' : 'O';\n\n    // After the fifth move, allow players to move an existing piece\n    if (currentMove >= 5) {\n      if (selectedSquare !== null && squares[i] === null && isAdjacent(selectedSquare, i)) {\n        nextSquares[selectedSquare] = null; // Remove from current position\n        nextSquares[i] = player; // Move to new position\n        onPlay(nextSquares, null); // Pass null to deselect\n      } else if (squares[i] === player) {\n        setSelectedSquare(i); // Select the piece\n      }\n    } else {\n      // Normal placement for the first 5 moves\n      nextSquares[i] = player;\n      onPlay(nextSquares, null); // Pass null as no piece is selected\n    }\n  }\n\n  const winner = calculateWinner(squares);\n  const status = winner ? 'Winner: ' + winner : 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      <div className=\"board\">\n        {squares.map((square, idx) => (\n          <Square key={idx} value={square} onSquareClick={() => handleClick(idx)} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nfunction Game() {\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null), selectedSquare: null }]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const current = history[currentMove];\n  const currentSquares = current.squares;\n  const selectedSquare = current.selectedSquare;\n\n  function handlePlay(nextSquares, selectedSquareIndex) {\n    const newHistory = history.slice(0, currentMove + 1);\n    newHistory.push({ squares: nextSquares, selectedSquare: selectedSquareIndex });\n    setHistory(newHistory);\n    setCurrentMove(newHistory.length - 1);\n  }\n\n  function jumpTo(step) {\n    setCurrentMove(step);\n  }\n\n  const moves = history.map((_, move) => (\n    <li key={move}>\n      <button onClick={() => jumpTo(move)}>\n        {move ? `Go to move #${move}` : 'Go to game start'}\n      </button>\n    </li>\n  ));\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          xIsNext={xIsNext}\n          squares={currentSquares}\n          onPlay={handlePlay}\n          currentMove={currentMove}\n          selectedSquare={selectedSquare}\n          setSelectedSquare={(index) => {\n            const newHistory = history.slice();\n            newHistory[currentMove] = { ...newHistory[currentMove], selectedSquare: index };\n            setHistory(newHistory);\n          }}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{moves}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}